# ./Dockerfile.python

# =====================================================================
# Stage 1: "builder" - Our common dependency layer
# This stage installs ALL python dependencies for the project.
# =====================================================================
FROM python:3.11-slim AS builder

WORKDIR /app

# Install poetry, which is a build-time dependency
RUN pip install poetry

# Configure poetry to install dependencies into the system's python, not a venv
RUN poetry config virtualenvs.create false

# Copy ONLY the dependency definition files
COPY pyproject.toml poetry.lock ./

# Install all dependencies from the lock file.
# This is the slowest step and will be cached aggressively by Docker.
# This layer will now only be invalidated if pyproject.toml or poetry.lock changes.
RUN poetry install --without dev --no-interaction --no-ansi --no-root


# =====================================================================
# Final Stages: One for each service
# Each of these starts from our builder stage, which already has all dependencies.
# =====================================================================

# --- Gateway Image ---
FROM builder AS gateway
WORKDIR /app
# All dependencies are already installed. Just copy the relevant source code.
# This is the crucial fix: Be specific! Don't use `COPY . .`.
COPY ./llm_agent_x /app/llm_agent_x
EXPOSE 8000
CMD ["poetry", "run", "llm-agent-x-gateway"]

# --- Worker Image ---
FROM builder AS worker
WORKDIR /app
# Same fix here: Only copy the source code directory.
COPY ./llm_agent_x /app/llm_agent_x
CMD ["poetry", "run", "llm-agent-x-worker"]

# --- Sandbox Image ---
FROM builder AS sandbox
WORKDIR /app
# The sandbox has its own code, so we copy that specifically.
COPY ./sandbox /app/sandbox
EXPOSE 5000
CMD ["uvicorn", "sandbox.sandbox_api:app", "--host", "0.0.0.0", "--port", "5000"]