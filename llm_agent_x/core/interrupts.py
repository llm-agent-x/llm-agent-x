from abc import ABC, abstractmethod
from typing import Dict, Any, List
from pydantic import BaseModel, Field
import uuid

class Interrupt(ABC):
    """Abstract base class for all events that can interrupt a task's flow."""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    priority: int  # Higher number means higher priority

    @abstractmethod
    def get_interrupt_prompt(self) -> str:
        """Generates the specific text the agent will see for this interrupt."""
        pass

    def __lt__(self, other: 'Interrupt') -> bool:
        """Comparison for the max-priority queue (heapq is a min-heap)."""
        return self.priority > other.priority

class HumanDirectiveInterrupt(Interrupt, BaseModel):
    """An interrupt generated by a human operator."""
    priority: int = 100  # Highest priority
    command: str
    payload: Any

    def get_interrupt_prompt(self) -> str:
        return (
            f"--- CRITICAL HUMAN DIRECTIVE RECEIVED ---\n"
            f"COMMAND: {self.command}\n"
            f"PAYLOAD: {self.payload}\n"
            f"You MUST process this directive now. Formulate a response or acknowledgement."
        )

class AgentMessageInterrupt(Interrupt, BaseModel):
    """An interrupt representing a message from another agent task."""
    priority: int = 50  # Standard priority
    source_task_id: str
    message: str
    target_tags: List[str] = Field(default_factory=list)

    def get_interrupt_prompt(self) -> str:
        return (
            f"--- AGENT MESSAGE RECEIVED ---\n"
            f"FROM TASK ID: {self.source_task_id}\n"
            f"MESSAGE: {self.message}\n"
            f"You received this because you have one of the target tags: {self.target_tags}.\n"
            f"Analyze this message and decide if you need to act on it."
        )